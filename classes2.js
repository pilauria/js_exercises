/* 
*1.Â UseÂ aÂ constructorÂ functionÂ toÂ implementÂ anÂ ElectricÂ CarÂ (calledÂ EV)Â asÂ aÂ CHILDÂ "class"Â ofÂ Car.Â BesidesÂ aÂ makeÂ andÂ currentÂ speed,Â theÂ EVÂ alsoÂ hasÂ theÂ currentÂ batteryÂ chargeÂ inÂ %Â ('charge'Â property);*

*2.Â ImplementÂ aÂ 'chargeBattery'Â methodÂ whichÂ takesÂ anÂ argumentÂ 'chargeTo'Â andÂ setsÂ theÂ batteryÂ chargeÂ toÂ 'chargeTo';*

*3.Â ImplementÂ anÂ 'accelerate'Â methodÂ thatÂ willÂ increaseÂ theÂ car'sÂ speedÂ byÂ 20,Â andÂ decreaseÂ theÂ chargeÂ byÂ 1%.Â ThenÂ logÂ aÂ messageÂ likeÂ this:Â 'TeslaÂ goingÂ atÂ 140Â km/h,Â withÂ aÂ chargeÂ ofÂ 22%';*

*4.Â CreateÂ anÂ electricÂ carÂ objectÂ andÂ experimentÂ withÂ callingÂ 'accelerate',Â 'brake'Â andÂ 'chargeBattery'Â (chargeÂ toÂ 90%).Â NoticeÂ whatÂ happensÂ whenÂ youÂ 'accelerate'!Â HINT:Â ReviewÂ theÂ definitonÂ ofÂ polymorphismÂ ğŸ˜‰*

*DATAÂ CARÂ 1:Â 'Tesla'Â goingÂ atÂ 120Â km/h,Â withÂ aÂ chargeÂ ofÂ 23%*
*/

const Car = function (make, speed) {
  this.make = make;
  this.speed = speed;
};

Car.prototype.accelerate = function () {
  this.speed += 10;
  console.log(`${this.make} is going at ${this.speed} km/h`);
};

Car.prototype.brake = function () {
  this.speed -= 5;
  console.log(`${this.make} is going at ${this.speed} km/h`);
};

const EV = function (make, speed, charge) {
  Car.call(this, make, speed);
  this.charge = charge;
};

// Link the prototypes
EV.prototype = Object.create(Car.prototype);

EV.prototype.chargeBattery = function (chargeTo) {
  this.charge = chargeTo;
};

EV.prototype.accelerate = function () {
  this.speed += 20;
  this.charge--;
  console.log(
    `${this.make} is going at ${this.speed} km/h, with a charge of ${this.charge}`
  );
};

const tesla = new EV('Tesla', 120, 23);
tesla.chargeBattery(90);
console.log(tesla);
tesla.brake();
tesla.accelerate();

/* There are 2 accelerate methods: one for Car and one for EV. When there are two methods (or properties) with the same name in a prototype chain, the first one that appears in the chain is the one that's gonna be used.

(So the same is true also for the scope chain). So:

A child class overwrite a method that inherited from the parent class.

 In this case the first one is the method inside the EV which is the constructor closer to the tesla object.

So if we didn't create the second accelerate method then this would still work with the accelerate method of the Car.*/
